#!/bin/bash

# Array of Pokémon names
POKEMON_LIST=("Bulbasaur" "Ivysaur" "Venusaur" "Charmander" "Charmeleon")

# Directory to save the data
OUTPUT_DIR="pokemon_data_parallel"

# Create the output directory if it doesn't exist
mkdir -p "${OUTPUT_DIR}"

echo "Starting parallel fetch for all Pokémon..."

# Loop through the list of Pokémon and start a background process for each
for pokemon_name in "${POKEMON_LIST[@]}"; do
  # Convert the name to lowercase for the API URL and filename
  lower_pokemon_name=$(echo "$pokemon_name" | tr '[:upper:]' '[:lower:]')
  
  output_file="${OUTPUT_DIR}/${lower_pokemon_name}.json"

  # The main command to fetch data. 
  # The '&' at the end runs this command in the background.
  (
    echo "Fetching data for ${lower_pokemon_name}..."
    curl -s "https://pokeapi.co/api/v2/pokemon/${lower_pokemon_name}" -o "${output_file}"
  ) &

done

# The 'wait' command pauses the script until all background jobs have finished.
# This is crucial for ensuring the script doesn't exit before downloads are complete.
wait

echo "--------------------------------------------------"
echo "All parallel downloads complete. Verifying files..."
echo "--------------------------------------------------"

# Loop again to verify which files were created successfully
for pokemon_name in "${POKEMON_LIST[@]}"; do
  lower_pokemon_name=$(echo "$pokemon_name" | tr '[:upper:]' '[:lower:]')
  output_file="${OUTPUT_DIR}/${lower_pokemon_name}.json"

  if [ -s "${output_file}" ]; then
    echo "✅ Data saved for ${lower_pokemon_name} in ${output_file}"
  else
    echo "❌ Failed to save data for ${lower_pokemon_name}."
  fi
done
